datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

model User {
  id       String  @id
  name     String?
  email    String  @unique
  password String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("users")
}

model Template {
  id         String    @id
  title      String    @unique
  content    String
  messages   Message[]
  is_default Boolean   @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("templates")
}

model Tag {
  id             String         @id
  title          String         @unique
  subscribers    Subscription[]
  messages       MessageTag[]
  integration_id String?        @unique

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("tags")
}

model Contact {
  id              String         @id
  name            String?
  email           String         @unique
  recipients      Recipient[]
  subscriptions   Subscription[]
  is_unsubscribed Boolean        @default(false)
  is_blocked      Boolean        @default(false)
  is_bounced      Boolean        @default(false)
  integration_id  String?        @unique

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("contacts")
}

model Subscription {
  id         String  @id
  contact    Contact @relation(fields: [contact_id], references: [id])
  tag        Tag     @relation(fields: [tag_id], references: [id])
  contact_id String
  tag_id     String

  @@unique([contact_id, tag_id])
  @@map("subscriptions")
}

model Message {
  id               String       @id
  subject          String
  body             String
  template         Template?    @relation(fields: [template_id], references: [id])
  template_id      String?
  recipients       Recipient[]
  tags             MessageTag[]
  sender           Sender       @relation(fields: [sender_id], references: [id])
  sender_id        String
  recipients_count Int          @default(0)

  sent_at    DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt

  @@map("messages")
}

enum EventType {
  DELIVER
  OPEN
  CLICK
  BOUNCE
  COMPLAINT
  REJECT
}

model Event {
  id           String    @id
  type         EventType
  meta         Json?
  recipient    Recipient @relation(fields: [recipient_id], references: [id])
  recipient_id String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("events")
}

model Recipient {
  id         String  @id
  message    Message @relation(fields: [message_id], references: [id])
  contact    Contact @relation(fields: [contact_id], references: [id])
  message_id String
  contact_id String
  events     Event[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@unique([message_id, contact_id])
  @@map("recipients")
}

model Sender {
  id           String    @id
  name         String
  email        String    @unique
  is_validated Boolean   @default(false)
  is_default   Boolean   @default(false)
  messages     Message[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("senders")
}

model MessageTag {
  id         String  @id
  message    Message @relation(fields: [message_id], references: [id])
  tag        Tag     @relation(fields: [tag_id], references: [id])
  message_id String
  tag_id     String

  @@map("message_tags")
}
